import { Contracts } from "@arkecosystem/platform-sdk";
import { BigNumber } from "@arkecosystem/platform-sdk-support";
import React from "react";

import { TransactionTable } from "./TransactionTable";

export default { title: "Domains / Transaction / Components / TransactionTable" };

const transactions: Contracts.TransactionDataType[] = [
	{
		id: () => "ee4175091d9f4dacf5fed213711c3e0e4cc371e37afa7bce0429d09bcf3ecefe",
		type: () => "transfer",
		timestamp: () => 1596213281,
		confirmations: () => BigNumber.make(10),
		votes: () => ["10"],
		unvotes: () => ["10"],
		sender: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipient: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipients: () => [],
		amount: () => BigNumber.make(100).times(1e8),
		fee: () => BigNumber.make(21).times(1e8),
		memo: () => "Test",
		asset: () => ({ a: "b" }),
		isConfirmed: () => false,
		isSent: () => true,
		isReceived: () => false,
		isTransfer: () => true,
		isSecondSignature: () => false,
		isMultiSignature: () => false,
		isDelegateRegistration: () => false,
		isDelegateResignation: () => false,
		isVote: () => false,
		isUnvote: () => false,
		isIpfs: () => false,
		isMultiPayment: () => false,
		isBusinessRegistration: () => false,
		isBusinessResignation: () => false,
		isBusinessUpdate: () => false,
		isBridgechainRegistration: () => false,
		isBridgechainResignation: () => false,
		isBridgechainUpdate: () => false,
		isEntityRegistration: () => false,
		isEntityResignation: () => false,
		isEntityUpdate: () => false,
		isHtlcLock: () => false,
		isHtlcClaim: () => false,
		isHtlcRefund: () => false,
		toObject: () => ({ a: "b" }),
		hasPassed: () => true,
		hasFailed: () => false,
		getMeta: () => "",
		setMeta: () => "",
	},
	{
		id: () => "ee4175091d9f4dacf5fed213711c3e0e4cc371e37afa7bce0429d09bcf3ecefe",
		type: () => "transfer",
		timestamp: () => 1596213281,
		confirmations: () => BigNumber.make(5),
		votes: () => ["10"],
		unvotes: () => ["10"],
		sender: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipient: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipients: () => [],
		amount: () => BigNumber.make(52).times(1e8),
		fee: () => BigNumber.make(0.2).times(1e8),
		memo: () => "Test",
		asset: () => ({ a: "b" }),
		isConfirmed: () => false,
		isSent: () => true,
		isReceived: () => false,
		isTransfer: () => true,
		isSecondSignature: () => true,
		isMultiSignature: () => false,
		isDelegateRegistration: () => false,
		isDelegateResignation: () => false,
		isVote: () => false,
		isUnvote: () => false,
		isIpfs: () => false,
		isMultiPayment: () => false,
		isBusinessRegistration: () => false,
		isBusinessResignation: () => false,
		isBusinessUpdate: () => false,
		isBridgechainRegistration: () => false,
		isBridgechainResignation: () => false,
		isBridgechainUpdate: () => false,
		isEntityRegistration: () => false,
		isEntityResignation: () => false,
		isEntityUpdate: () => false,
		isHtlcLock: () => false,
		isHtlcClaim: () => false,
		isHtlcRefund: () => false,
		toObject: () => ({ a: "b" }),
		hasPassed: () => true,
		hasFailed: () => false,
		getMeta: () => "",
		setMeta: () => "",
	},
	{
		id: () => "ee4175091d9f4dacf5fed213711c3e0e4cc371e37afa7bce0429d09bcf3ecefe",
		type: () => "vote",
		timestamp: () => 1596213281,
		confirmations: () => BigNumber.make(5),
		votes: () => ["10"],
		unvotes: () => ["10"],
		sender: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipient: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipients: () => [],
		amount: () => BigNumber.make(1).times(1e8),
		fee: () => BigNumber.make(0.2).times(1e8),
		memo: () => "Test",
		asset: () => ({ a: "b" }),
		isConfirmed: () => false,
		isSent: () => true,
		isReceived: () => false,
		isTransfer: () => true,
		isSecondSignature: () => true,
		isMultiSignature: () => false,
		isDelegateRegistration: () => false,
		isDelegateResignation: () => false,
		isVote: () => true,
		isUnvote: () => false,
		isIpfs: () => false,
		isMultiPayment: () => false,
		isBusinessRegistration: () => false,
		isBusinessResignation: () => false,
		isBusinessUpdate: () => false,
		isBridgechainRegistration: () => false,
		isBridgechainResignation: () => false,
		isBridgechainUpdate: () => false,
		isEntityRegistration: () => false,
		isEntityResignation: () => false,
		isEntityUpdate: () => false,
		isHtlcLock: () => false,
		isHtlcClaim: () => false,
		isHtlcRefund: () => false,
		toObject: () => ({ a: "b" }),
		hasPassed: () => true,
		hasFailed: () => false,
		getMeta: () => "",
		setMeta: () => "",
	},
	{
		id: () => "ee4175091d9f4dacf5fed213711c3e0e4cc371e37afa7bce0429d09bcf3ecefe",
		type: () => "delegateRegistration",
		timestamp: () => 1596213281,
		confirmations: () => BigNumber.make(5),
		votes: () => ["10"],
		unvotes: () => ["10"],
		sender: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipient: () => "ASuusXSW9kfWnicScSgUTjttP6T9GQ3kqT",
		recipients: () => [],
		amount: () => BigNumber.make(1).times(1e8),
		fee: () => BigNumber.make(0.2).times(1e8),
		memo: () => "Test",
		asset: () => ({ a: "b" }),
		isConfirmed: () => false,
		isSent: () => true,
		isReceived: () => false,
		isTransfer: () => true,
		isSecondSignature: () => true,
		isMultiSignature: () => false,
		isDelegateRegistration: () => true,
		isDelegateResignation: () => false,
		isVote: () => true,
		isUnvote: () => false,
		isIpfs: () => false,
		isMultiPayment: () => false,
		isBusinessRegistration: () => false,
		isBusinessResignation: () => false,
		isBusinessUpdate: () => false,
		isBridgechainRegistration: () => false,
		isBridgechainResignation: () => false,
		isBridgechainUpdate: () => false,
		isEntityRegistration: () => false,
		isEntityResignation: () => false,
		isEntityUpdate: () => false,
		isHtlcLock: () => false,
		isHtlcClaim: () => false,
		isHtlcRefund: () => false,
		toObject: () => ({ a: "b" }),
		hasPassed: () => true,
		hasFailed: () => false,
		getMeta: () => "",
		setMeta: () => "",
	},
];
export const Default = () => <TransactionTable transactions={transactions} />;

export const WithCurrency = () => <TransactionTable transactions={transactions} currencyRate="2" />;

export const WithSign = () => <TransactionTable transactions={transactions} showSignColumn />;
